{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Section/Section.js","components/Notification/Notification.js","App.js","index.js","components/FeedbackOptions/FeedbackOptions.module.css"],"names":["FeedbackOptions","options","onLeaveFeedback","map","type","className","styles","onClick","defaultProps","Statistics","good","neutral","bad","total","positivePercentage","Section","title","children","Notification","message","App","state","handleIncrementFeedback","setState","prevState","countTotalFeedback","Object","values","reduce","acc","cur","countPositiveFeedbackPercentage","this","positivesPercent","parseFloat","toFixed","keys","Component","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"2OAIMA,EAAkB,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAASC,EAAX,EAAWA,gBAAX,OACtB,6BACGD,EAAQE,KAAI,SAAAC,GAAI,OACf,4BAAQC,UAAWC,IAAM,YAAiBF,KAAK,SAASG,QAAS,kBAAML,EAAgBE,KAAQA,QAKrGJ,EAAgBQ,aAAe,CAC7BP,QAAS,CAAC,OAAQ,UAAW,QAQhBD,QClBTS,EAAa,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,IAAKC,EAAtB,EAAsBA,MAAOC,EAA7B,EAA6BA,mBAA7B,OACjB,yBAAKT,UAAU,aACb,0CACA,oCAAUK,GACV,uCAAaC,GACb,mCAASC,GACT,qCAAWC,GACX,iDAAuBH,GAAQI,KAInCL,EAAWD,aAAe,CACxBE,KAAM,EACNC,QAAS,EACTC,IAAK,GAWQH,QCzBTM,EAAU,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,SAAT,OACd,6BAASZ,UAAU,4BACjB,4BAAKW,GACJC,IAILF,EAAQP,aAAe,CACrBQ,MAAO,yBAOMD,QCfTG,EAAe,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAAF,OACnB,4BAAKA,IAGPD,EAAaV,aAAe,CAC1BW,QAAS,qBAOID,QC6BAE,E,4MArCbC,MAAQ,CACNX,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAETU,wBAA0B,SAAAlB,GACtB,EAAKmB,UAAS,SAAAC,GACZ,OAAO,eACJpB,EAAOoB,EAAUpB,GAAQ,O,EAIlCqB,mBAAqB,kBAAMC,OAAOC,OAAO,EAAKN,OAAOO,QAAO,SAACC,EAAKC,GAAN,OAAcD,EAAMC,M,EAEhFC,gCAAkC,kBAAwB,IAAlB,EAAKV,MAAMX,KAAa,EAAKe,sB,uDAEzD,IAAD,EACsBO,KAAKX,MAA3BX,EADA,EACAA,KAAMC,EADN,EACMA,QAASC,EADf,EACeA,IAChBC,EAAQmB,KAAKP,qBACbQ,EAAmBC,WAAWF,KAAKD,kCAAkCI,QAAQ,IACnF,OACE,kBAAC,EAAD,CAASnB,MAAM,yBACb,kBAAC,EAAD,CACEf,QAASyB,OAAOU,KAAKJ,KAAKX,OAC1BnB,gBAAiB8B,KAAKV,0BAEvBT,EAAQ,EAAI,kBAAC,EAAD,CACXD,IAAKA,EACLF,KAAMA,EACNC,QAASA,EACTE,MAAOA,EACPC,mBAAoBmB,IACjB,kBAAC,EAAD,CAAcd,QAAQ,2B,GAjCjBkB,aCFlBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U,kBCP1BC,EAAOC,QAAU,CAAC,YAAc,uC","file":"static/js/main.c7e1c654.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./FeedbackOptions.module.css\";\n\nconst FeedbackOptions = ({options, onLeaveFeedback}) => (\n  <div>\n    {options.map(type => (\n      <button className={styles[\"btnFeedback\"]} type=\"submit\" onClick={() => onLeaveFeedback(type)}>{type}</button>\n    ))}\n  </div>\n);\n\nFeedbackOptions.defaultProps = {\n  options: [\"good\", \"neutral\", \"bad\"],\n}\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string),\n  onLeaveFeedback: PropTypes.func.isRequired,\n}\n\nexport default FeedbackOptions;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Statistics = ({good, neutral, bad, total, positivePercentage}) => (\n  <div className=\"statistic\">\n    <h2>Statistics</h2>\n    <p>Good: {good}</p>\n    <p>Neutral: {neutral}</p>\n    <p>Bad: {bad}</p>\n    <p>Total: {total}</p>\n    <p>Positive feedback: {good && positivePercentage}</p>\n  </div>\n);\n\nStatistics.defaultProps = {\n  good: 0,\n  neutral: 0,\n  bad: 0,\n}\n\nStatistics.propTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  total: PropTypes.number,\n  positivePercentage: PropTypes.number,\n}\n\nexport default Statistics;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Section = ({title, children}) => (\n  <section className=\"section feedback-section\">\n    <h2>{title}</h2>\n    {children}\n  </section>\n);\n\nSection.defaultProps = {\n  title: \"Please leave feedback\",\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node.isRequired,\n}\nexport default Section;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Notification = ({message}) => (\n  <h2>{message}</h2>\n);\n\nNotification.defaultProps = {\n  message: \"No feedback given\",\n}\n\nNotification.propTypes = {\n  message: PropTypes.string,\n}\n\nexport default Notification;","import React, {Component} from 'react';\nimport FeedbackOptions from \"./components/FeedbackOptions/FeedbackOptions\";\nimport Statistics from \"./components/Statistics/Statistics\";\nimport Section from \"./components/Section/Section\";\nimport Notification from \"./components/Notification/Notification\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  }\nhandleIncrementFeedback = type => {\n    this.setState(prevState => {\n      return {\n        [type]: prevState[type] + 1,\n      }\n    })\n}\ncountTotalFeedback = () => Object.values(this.state).reduce((acc, cur) => acc + cur);\n\ncountPositiveFeedbackPercentage = () => this.state.good * 100 / this.countTotalFeedback();\n\n  render() {\n    const {good, neutral, bad} = this.state;\n    const total = this.countTotalFeedback();\n    const positivesPercent = parseFloat(this.countPositiveFeedbackPercentage().toFixed(2));\n    return (\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={Object.keys(this.state)}\n          onLeaveFeedback={this.handleIncrementFeedback}\n        />\n        {total > 0 ? <Statistics\n          bad={bad}\n          good={good}\n          neutral={neutral}\n          total={total}\n          positivePercentage={positivesPercent}\n        /> : <Notification message=\"No feedback given\"/>}\n      </Section>\n    );\n  };\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnFeedback\":\"FeedbackOptions_btnFeedback__2HPWS\"};"],"sourceRoot":""}